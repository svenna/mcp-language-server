#!/bin/bash

# claude-code-mcp-lsp-setup - MCP Language Server Setup Script for Claude Code
# Install this script in ~/bin for easy access from any project directory

set -e

PROJECT_DIR="$(pwd)"
SCRIPT_DIR="$(dirname "$0")"

echo "🚀 Claude Code MCP Language Server Setup"
echo "Setting up MCP for: $PROJECT_DIR"
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to find mcp-language-server binary
find_mcp_binary() {
    local binary_name="mcp-language-server"
    
    # Check common locations
    local locations=(
        "$(dirname "$0")/$binary_name"
        "$HOME/go/bin/$binary_name"
        "$HOME/.local/bin/$binary_name"
        "/usr/local/bin/$binary_name"
        "$(which $binary_name 2>/dev/null || echo "")"
    )
    
    for location in "${locations[@]}"; do
        if [[ -n "$location" && -x "$location" ]]; then
            echo "$location"
            return 0
        fi
    done
    
    return 1
}

# Dependency verification
echo "📋 Checking dependencies..."

# Check for typescript-language-server
if ! command_exists typescript-language-server; then
    echo "❌ typescript-language-server not found"
    echo "   Install with: npm install -g typescript-language-server"
    exit 1
fi
echo "✅ typescript-language-server found"

# Check for mcp-language-server binary
MCP_BINARY=$(find_mcp_binary)
if [[ -z "$MCP_BINARY" ]]; then
    echo "❌ mcp-language-server binary not found"
    echo "   Expected locations:"
    echo "   - $(dirname "$0")/mcp-language-server"
    echo "   - $HOME/go/bin/mcp-language-server"
    echo "   - $HOME/.local/bin/mcp-language-server"
    echo ""
    echo "   Build with: go build -o ~/bin/mcp-language-server"
    exit 1
fi
echo "✅ mcp-language-server found at: $MCP_BINARY"

# Find available port
echo ""
echo "🔍 Finding available port..."
PORT=8081
while lsof -i :$PORT >/dev/null 2>&1; do
    PORT=$((PORT + 1))
done
echo "✅ Using port: $PORT"

# Create .mcp.json
echo ""
echo "📝 Creating .mcp.json..."
cat > "$PROJECT_DIR/.mcp.json" << EOF
{
  "mcpServers": {
    "mcp-language-server": {
      "type": "sse",
      "url": "http://localhost:$PORT/sse"
    }
  }
}
EOF

# Create start script
echo "📝 Creating start-mcp-lsp-server.sh..."
cat > "$PROJECT_DIR/start-mcp-lsp-server.sh" << 'EOF'
#!/bin/bash

# Start MCP-LSP Bridge Server for this project
cd "$(dirname "$0")"
PROJECT_DIR="$(pwd)"

# Read configuration from .mcp.json
if [[ ! -f ".mcp.json" ]]; then
    echo "❌ .mcp.json not found. Run claude-code-mcp-lsp-setup first."
    exit 1
fi

# Extract port from .mcp.json URL
PORT=$(grep '"url"' .mcp.json | sed 's/.*localhost:\([0-9]*\).*/\1/')
if [[ -z "$PORT" ]]; then
    echo "❌ Could not extract port from .mcp.json"
    exit 1
fi

echo "🚀 Starting MCP-LSP Bridge Server"
echo "📁 Project: $PROJECT_DIR"
echo "🌐 Port: $PORT"
echo ""

# Check if server is already running
if lsof -i :$PORT > /dev/null 2>&1; then
    echo "⚠️  MCP-LSP server already running on port $PORT"
    echo "   Use 'kill \$(lsof -t -i :$PORT)' to stop it"
    exit 0
fi

# Find MCP binary
MCP_BINARY=""
for location in ~/.local/bin/mcp-language-server ~/go/bin/mcp-language-server /usr/local/bin/mcp-language-server; do
    if [[ -x "$location" ]]; then
        MCP_BINARY="$location"
        break
    fi
done

if [[ -z "$MCP_BINARY" ]]; then
    echo "❌ MCP-LSP binary not found. Expected locations:"
    echo "   - ~/.local/bin/mcp-language-server"
    echo "   - ~/go/bin/mcp-language-server"
    echo "   - /usr/local/bin/mcp-language-server"
    exit 1
fi

echo "🔧 Starting server in background..."

# Create logs directory if it doesn't exist
mkdir -p "$PROJECT_DIR/.mcp-logs"

# Start server in background with logs
nohup "$MCP_BINARY" \
    --workspace "$PROJECT_DIR" \
    --lsp typescript-language-server \
    --transport sse \
    --port "$PORT" \
    -- --stdio \
    > "$PROJECT_DIR/.mcp-logs/server.log" 2>&1 &

SERVER_PID=$!

# Give server a moment to start
sleep 2

# Check if server is running
if kill -0 $SERVER_PID 2>/dev/null; then
    echo "✅ MCP-LSP server started successfully"
    echo "📝 PID: $SERVER_PID (saved to .mcp-logs/server.pid)"
    echo "📋 Logs: .mcp-logs/server.log"
    echo "🌐 Server: http://localhost:$PORT"
    echo ""
    echo "💡 To stop the server:"
    echo "   kill $SERVER_PID"
    echo "   # or"
    echo "   kill \$(cat .mcp-logs/server.pid)"
    
    # Save PID for later use
    echo $SERVER_PID > "$PROJECT_DIR/.mcp-logs/server.pid"
else
    echo "❌ Server failed to start. Check .mcp-logs/server.log for details"
    exit 1
fi
EOF

# Make start script executable
chmod +x "$PROJECT_DIR/start-mcp-lsp-server.sh"

echo ""
echo "✅ Setup complete!"
echo ""
echo "📁 Files created:"
echo "   - .mcp.json (MCP configuration - connects to running server)"
echo "   - start-mcp-lsp-server.sh (daemon startup script)"
echo ""
echo "🚀 To start the MCP-LSP server:"
echo "   ./start-mcp-lsp-server.sh"
echo ""
echo "🔗 Server will be available at:"
echo "   http://localhost:$PORT"
echo ""
echo "💡 The server runs as a daemon - your terminal stays free!"
echo "💡 Add .mcp-logs/ to your .gitignore if needed"